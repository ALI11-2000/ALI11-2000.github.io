$date
	Mon Oct 25 12:59:11 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module top $end
$var wire 3 ! actv [2:0] $end
$var wire 1 " clk $end
$var wire 32 # degrees [31:0] $end
$var wire 1 $ enable $end
$var wire 1 % rst $end
$var wire 32 & divider_out [31:0] $end
$var wire 64 ' data_tan [63:0] $end
$var wire 64 ( data_sin [63:0] $end
$var wire 64 ) data_sec [63:0] $end
$var wire 64 * data_csc [63:0] $end
$var wire 64 + data_cot [63:0] $end
$var wire 64 , data_cos [63:0] $end
$var reg 1 - cos_enable $end
$var reg 1 . cot_enable $end
$var reg 1 / csc_enable $end
$var reg 64 0 data1 [63:0] $end
$var reg 32 1 degrees_tmp1 [31:0] $end
$var reg 32 2 degrees_tmp2 [31:0] $end
$var reg 2 3 quad [1:0] $end
$var reg 1 4 sec_enable $end
$var reg 1 5 sin_enable $end
$var reg 1 6 tan_enable $end
$scope module a1 $end
$var wire 1 " clk $end
$var wire 32 7 degrees [31:0] $end
$var wire 1 5 enable $end
$var wire 2 8 quad [1:0] $end
$var wire 1 % rst $end
$var reg 64 9 data [63:0] $end
$upscope $end
$scope module a2 $end
$var wire 1 " clk $end
$var wire 32 : degrees [31:0] $end
$var wire 1 - enable $end
$var wire 2 ; quad [1:0] $end
$var wire 1 % rst $end
$var reg 64 < data [63:0] $end
$upscope $end
$scope module a3 $end
$var wire 1 " clk $end
$var wire 32 = degrees [31:0] $end
$var wire 1 6 enable $end
$var wire 2 > quad [1:0] $end
$var wire 1 % rst $end
$var reg 64 ? data [63:0] $end
$upscope $end
$scope module a4 $end
$var wire 1 " clk $end
$var wire 32 @ degrees [31:0] $end
$var wire 1 / enable $end
$var wire 2 A quad [1:0] $end
$var wire 1 % rst $end
$var reg 64 B data [63:0] $end
$upscope $end
$scope module a5 $end
$var wire 1 " clk $end
$var wire 32 C degrees [31:0] $end
$var wire 1 4 enable $end
$var wire 2 D quad [1:0] $end
$var wire 1 % rst $end
$var reg 64 E data [63:0] $end
$upscope $end
$scope module a6 $end
$var wire 1 " clk $end
$var wire 32 F degrees [31:0] $end
$var wire 1 . enable $end
$var wire 2 G quad [1:0] $end
$var wire 1 % rst $end
$var reg 64 H data [63:0] $end
$upscope $end
$scope module a7 $end
$var wire 32 I DIVISOR [31:0] $end
$var wire 1 " clk $end
$var wire 32 J inp [31:0] $end
$var wire 1 % rst $end
$var reg 32 K out [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 K
b1011010 J
b101101000 I
bx H
b0 G
b1011010 F
bx E
b0 D
b1011010 C
bx B
b0 A
b1011010 @
bx ?
b0 >
b1011010 =
bx <
b0 ;
b1011010 :
bx 9
b0 8
b1011010 7
06
05
04
b0 3
b1011010 2
bx 1
bx 0
0/
0.
0-
bx ,
bx +
bx *
bx )
bx (
bx '
b0 &
0%
1$
b1011010 #
1"
b0 !
$end
#5000
0"
#10000
15
b1011010 &
b1011010 K
bx +
bx H
bx )
bx E
bx *
bx B
bx '
bx ?
bx ,
bx <
bx (
bx 9
1"
#15000
0"
#20000
b11111111110000000000000000000000000000000000000000000000000000 (
b11111111110000000000000000000000000000000000000000000000000000 9
bx ,
bx <
bx '
bx ?
bx *
bx B
bx )
bx E
bx +
bx H
1"
#25000
0"
#30000
b11111111110000000000000000000000000000000000000000000000000000 0
bx +
bx H
bx )
bx E
bx *
bx B
bx '
bx ?
bx ,
bx <
1"
#35000
0"
#40000
bx ,
bx <
bx '
bx ?
bx *
bx B
bx )
bx E
bx +
bx H
1"
#45000
0"
#50000
bx +
bx H
bx )
bx E
bx *
bx B
bx '
bx ?
bx ,
bx <
1"
#55000
0"
#60000
bx ,
bx <
bx '
bx ?
bx *
bx B
bx )
bx E
bx +
bx H
1"
#65000
0"
#70000
bx +
bx H
bx )
bx E
bx *
bx B
bx '
bx ?
bx ,
bx <
1"
#75000
0"
#80000
bx ,
bx <
bx '
bx ?
bx *
bx B
bx )
bx E
bx +
bx H
1"
#85000
0"
#90000
bx +
bx H
bx )
bx E
bx *
bx B
bx '
bx ?
bx ,
bx <
1"
#95000
0"
#100000
bx ,
bx <
bx '
bx ?
bx *
bx B
bx )
bx E
bx +
bx H
1"
#105000
0"
#110000
bx +
bx H
bx )
bx E
bx *
bx B
bx '
bx ?
bx ,
bx <
1"
#115000
0"
#120000
bx ,
bx <
bx '
bx ?
bx *
bx B
bx )
bx E
bx +
bx H
1"
#125000
0"
#130000
bx +
bx H
bx )
bx E
bx *
bx B
bx '
bx ?
bx ,
bx <
1"
#135000
0"
#140000
bx ,
bx <
bx '
bx ?
bx *
bx B
bx )
bx E
bx +
bx H
1"
#145000
0"
#150000
bx +
bx H
bx )
bx E
bx *
bx B
bx '
bx ?
bx ,
bx <
1"
#155000
0"
#160000
bx ,
bx <
bx '
bx ?
bx *
bx B
bx )
bx E
bx +
bx H
1"
#165000
0"
#170000
bx +
bx H
bx )
bx E
bx *
bx B
bx '
bx ?
bx ,
bx <
1"
#175000
0"
#180000
bx ,
bx <
bx '
bx ?
bx *
bx B
bx )
bx E
bx +
bx H
1"
#185000
0"
#190000
bx +
bx H
bx )
bx E
bx *
bx B
bx '
bx ?
bx ,
bx <
1"
#195000
0"
#200000
bx ,
bx <
bx '
bx ?
bx *
bx B
bx )
bx E
bx +
bx H
1"
#205000
0"
#210000
bx +
bx H
bx )
bx E
bx *
bx B
bx '
bx ?
bx ,
bx <
1"
#215000
0"
#220000
bx ,
bx <
bx '
bx ?
bx *
bx B
bx )
bx E
bx +
bx H
1"
#225000
0"
#230000
bx +
bx H
bx )
bx E
bx *
bx B
bx '
bx ?
bx ,
bx <
1"
#235000
0"
#240000
bx ,
bx <
bx '
bx ?
bx *
bx B
bx )
bx E
bx +
bx H
1"
#245000
0"
#250000
bx +
bx H
bx )
bx E
bx *
bx B
bx '
bx ?
bx ,
bx <
1"
#255000
0"
#260000
bx ,
bx <
bx '
bx ?
bx *
bx B
bx )
bx E
bx +
bx H
1"
#265000
0"
#270000
bx +
bx H
bx )
bx E
bx *
bx B
bx '
bx ?
bx ,
bx <
1"
#275000
0"
#280000
bx ,
bx <
bx '
bx ?
bx *
bx B
bx )
bx E
bx +
bx H
1"
#285000
0"
#290000
bx +
bx H
bx )
bx E
bx *
bx B
bx '
bx ?
bx ,
bx <
1"
#295000
0"
#300000
bx ,
bx <
bx '
bx ?
bx *
bx B
bx )
bx E
bx +
bx H
1"
#305000
0"
#310000
bx +
bx H
bx )
bx E
bx *
bx B
bx '
bx ?
bx ,
bx <
1"
#315000
0"
#320000
bx ,
bx <
bx '
bx ?
bx *
bx B
bx )
bx E
bx +
bx H
1"
#325000
0"
#330000
bx +
bx H
bx )
bx E
bx *
bx B
bx '
bx ?
bx ,
bx <
1"
#335000
0"
#340000
bx ,
bx <
bx '
bx ?
bx *
bx B
bx )
bx E
bx +
bx H
1"
#345000
0"
#350000
bx +
bx H
bx )
bx E
bx *
bx B
bx '
bx ?
bx ,
bx <
1"
#355000
0"
#360000
bx ,
bx <
bx '
bx ?
bx *
bx B
bx )
bx E
bx +
bx H
1"
#365000
0"
#370000
bx +
bx H
bx )
bx E
bx *
bx B
bx '
bx ?
bx ,
bx <
1"
#375000
0"
#380000
bx ,
bx <
bx '
bx ?
bx *
bx B
bx )
bx E
bx +
bx H
1"
#385000
0"
#390000
bx +
bx H
bx )
bx E
bx *
bx B
bx '
bx ?
bx ,
bx <
1"
#395000
0"
#400000
bx ,
bx <
bx '
bx ?
bx *
bx B
bx )
bx E
bx +
bx H
1"
#405000
0"
#410000
bx +
bx H
bx )
bx E
bx *
bx B
bx '
bx ?
bx ,
bx <
1"
#415000
0"
#420000
bx ,
bx <
bx '
bx ?
bx *
bx B
bx )
bx E
bx +
bx H
1"
#425000
0"
#430000
bx +
bx H
bx )
bx E
bx *
bx B
bx '
bx ?
bx ,
bx <
1"
#435000
0"
#440000
bx ,
bx <
bx '
bx ?
bx *
bx B
bx )
bx E
bx +
bx H
1"
#445000
0"
#450000
bx +
bx H
bx )
bx E
bx *
bx B
bx '
bx ?
bx ,
bx <
1"
#455000
0"
#460000
bx ,
bx <
bx '
bx ?
bx *
bx B
bx )
bx E
bx +
bx H
1"
#465000
0"
#470000
bx +
bx H
bx )
bx E
bx *
bx B
bx '
bx ?
bx ,
bx <
1"
#475000
0"
#480000
bx ,
bx <
bx '
bx ?
bx *
bx B
bx )
bx E
bx +
bx H
1"
#485000
0"
#490000
bx +
bx H
bx )
bx E
bx *
bx B
bx '
bx ?
bx ,
bx <
1"
#495000
0"
#500000
bx ,
bx <
bx '
bx ?
bx *
bx B
bx )
bx E
bx +
bx H
1"
#500001
